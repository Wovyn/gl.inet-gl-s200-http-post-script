#!/bin/sh
#
# Version 1.3
#
# Note, this file is stored on the GL-S200 as /usr/bin/wovyn_get_sensor_data_post
#
# Usage: wovyn_get_sensor_data_post <dev_id>
#
# If <dev_id> is null this script will iterate through all of the Thread sensors, displaying
# their current values, and POSTing each object as JSON to the defined HTTP endpoint.
#
# If a <dev_id> is passed as the EUI64 of the device then that device data will be displayed.
#
# The device EUI64 values can be veiwed in /etc/config/thread_devices.
#

. /usr/share/libubox/jshn.sh

echo "------------------------------------------------------------------------"

# Define your HTTP endpoint
http_endpoint="http://{your.server.hostname}:{port number}/{path}"

# Grab the first parameter
dev_id=$1

# Check if the parameter is null?
if [ -z "$dev_id" ]; then

    # Fetch all of the devices
    res=$(curl -s -H "glinet: 1" localhost/rpc -d '{"jsonrpc":"2.0","id":"0","method":"call","params":["","gw","get_device_list",{}]}')

    json_init
    json_set_namespace default_ns
    json_load "$res"
    json_select result
    json_select device_list
    idx=1

    # Iterate through each object
    while json_is_a ${idx} object; do
	
        json_select ${idx}
        json_get_var dev_id dev_id
        json_get_var connected connected

        json_select dev_data
        json_get_var val_temp temperature
        json_get_var val_humi humidity
        json_get_var val_brightness brightness
        json_get_var val_pressure pressure

        # Output the current values
        echo "$idx dev_id=$dev_id connected=$connected temperature=$val_temp humidity=$val_humi brightness=$val_brightness pressure=$val_pressure"

        json_select ..
        json_select ..

        # Extract this sensor data as JSON
        json_set_namespace sensor_data_ns
        sensor_idx=$((idx - 1))
        sensor_data_json=$(jsonfilter -s "$res" -e "@.result.device_list[$sensor_idx]")
#        echo -e "\n\n>> jsonfilter output: $sensor_data_json \n\n"

        json_load "$sensor_data_json"
        MSG_JSON=`json_dump`
#        echo -e "\n\n>> Object: $MSG_JSON \n\n"

        # POST to HTTP Endpoint
        post_res=$(curl -s -d "$MSG_JSON" -H "Content-Type: application/json" -X POST "$http_endpoint")
        json_set_namespace default_ns

        idx=$((idx + 1))
    done
else
    res=$(curl -s -H "glinet: 1" localhost/rpc -d "{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"call\",\"params\":[\"\",\"gw\",\"get_device_status\",{\"dev_id\":\"$dev_id\"}]}")

    json_init
    json_load "$res"
    json_select result
    json_get_var dev_id dev_id
    json_get_var connected connected
    json_select dev_data
    json_get_var val_temp temperature
    json_get_var val_humi humidity
    json_get_var val_brightness brightness
    json_get_var val_pressure pressure
    echo "dev_id=$dev_id connected=$connected temperature=$val_temp humidity=$val_humi brightness=$val_brightness pressure=$val_pressure"
fi

exit 0
